{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_ALPHABET","SORT_FIELD_LENGTH","App","useState","sortField","setSortField","reverseField","setReverseField","goods","preparedGoods","sort","good1","good2","localeCompare","length","reverse","getPreparedGoods","className","type","onClick","cn","GoodList","map","good","ReactDOM","render","document","getElementById"],"mappings":"mPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAsB,WACtBC,EAAoB,SA8BnB,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,oBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACMC,EA/BR,SAA0BA,EAA1B,GAA+D,IAA5BJ,EAA2B,EAA3BA,UAAWE,EAAgB,EAAhBA,aACtCG,EAAa,YAAOD,GAwB1B,OAtBIJ,GACFK,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQR,GACN,KAAKJ,EACH,OAAOW,EAAME,cAAcD,GAG7B,KAAKX,EACH,OAAOU,EAAMG,OAASF,EAAME,OAG9B,QACE,OAAO,MAMXR,GACFG,EAAcM,UAGTN,EAMOO,CAAiBjB,EAAiB,CAAEK,YAAWE,iBAE7D,OACE,sBAAKW,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAMd,EAAaL,IAC5BiB,UAAWG,IAAG,SAAU,UACtB,CACE,WAAYhB,IAAcJ,IALhC,iCAWA,wBACEkB,KAAK,SACLC,QAAS,kBAAMd,EAAaJ,IAC5BgB,UAAWG,IAAG,SAAU,UACtB,CACE,WAAYhB,IAAcH,IALhC,4BAWA,wBACEiB,KAAK,SACLC,QAAS,kBAAMZ,GAAiBD,IAChCW,UAAWG,IAAG,SAAU,UACtB,CACE,YAAad,IALnB,sBAWEF,GAAaE,IACb,wBACEY,KAAK,SACLC,QAAS,WACPd,EAAa,IACbE,GAAgB,IAElBU,UAAU,4BANZ,sBAaJ,cAAC,EAAD,CAAUT,MAAOA,QAKVa,EAAW,SAAC,GAAD,IAAGb,EAAH,EAAGA,MAAH,OACtB,6BACGA,EAAMc,KAAI,SAAAC,GAAI,OACb,oBACE,UAAQ,OADV,SAIGA,GAFIA,SC/GbC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4cd65cf7.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport cn from 'classnames';\nimport './App.scss';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_ALPHABET = 'alphabet';\nconst SORT_FIELD_LENGTH = 'length';\n\nfunction getPreparedGoods(goods, { sortField, reverseField }) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_ALPHABET: {\n          return good1.localeCompare(good2);\n        }\n\n        case SORT_FIELD_LENGTH: {\n          return good1.length - good2.length;\n        }\n\n        default: {\n          return 0;\n        }\n      }\n    });\n  }\n\n  if (reverseField) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [reverseField, setReverseField] = useState(false);\n  const goods = getPreparedGoods(goodsFromServer, { sortField, reverseField });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SORT_FIELD_ALPHABET)}\n          className={cn('button', 'is-info',\n            {\n              'is-light': sortField !== SORT_FIELD_ALPHABET,\n            })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n          className={cn('button', 'is-info',\n            {\n              'is-light': sortField !== SORT_FIELD_LENGTH,\n            })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setReverseField(!reverseField)}\n          className={cn('button', 'is-info',\n            {\n              'is-light': !reverseField,\n            })}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reverseField) && (\n          <button\n            type=\"button\"\n            onClick={() => {\n              setSortField('');\n              setReverseField(false);\n            }}\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <GoodList goods={goods} />\n    </div>\n  );\n};\n\nexport const GoodList = ({ goods }) => (\n  <ul>\n    {goods.map(good => (\n      <li\n        data-cy=\"Good\"\n        key={good}\n      >\n        {good}\n      </li>\n    ))}\n  </ul>\n);\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}